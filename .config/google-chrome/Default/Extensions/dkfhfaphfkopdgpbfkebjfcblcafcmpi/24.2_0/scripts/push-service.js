var pushProvider="mt",pushPayloadBabysitterArray=[],userIsDefaultPushServiceCapable=!1,timeBeforeCheckForPushServiceEnabled=18E3,PushServiceBabysitterIntervalDetails={id:"",interval:generateBabysitterIntervalInMS(),body:generateBabySitterBody()},PUSHHealthCheckInterval={id:"",interval:1E4,body:"CAPI_HEALTH_CHECK_WEBAPP_NOV_2017"},globalTsLastPushRcvd=new Date-6E4;
function setupPushSocket(){"frd"==pushProvider?retrieveFRDClientLib():"pusher"==pushProvider?retrievePusherJSLib():getMTPushSetupInfo({init_app_load:!0})}function reestablishPushSocket(){"pusher"==pushProvider?closeAndOpenNewPusherSocket():closeAndReAttemptOpenFRDSocket()}function closePushSocket(){"function"==typeof closePusherSocket&&closePusherSocket()}
function checkIfUserIsCompatibleWithOurDefaultPushProvider(){var a="push-service-not-compatible",b=0;userIsDefaultPushServiceCapable?(a="push-service-compatible",b=1):pushServiceLogger("Oh no! User is not compatible w/ our current push provider.","error");recordPUSHHealthCheckEvent({push_type:"push-service-compatibility",sub_type:pushProvider,attempt:1,success:b});pushServiceLogger("[PUSH SERVICE CAPABILITY CHECK] User is "+a)}
function pushServiceLogger(a,b,c){a="[PUSH]["+pushProvider.toUpperCase()+"] "+a;"native-app"==clientRunningScript?writeToDesktopLog(a):"undefined"!=typeof b&&"error"==b?"undefined"!=typeof c?console.error(a,c):console.error(a):"undefined"!=typeof c?console.log(a,c):console.log(a)}
function babysitThisPushHealthCheck(a){if(-1<pushPayloadBabysitterArray.indexOf(a.id)){pushServiceLogger("PUSH Health Check ID: "+a.id+" did not come back in 5 seconds. Removing ID from babysitter array whose current length is "+pushPayloadBabysitterArray.length);pushPayloadBabysitterArray.splice(pushPayloadBabysitterArray.indexOf(a.id),1);var b={attempt:1,success:0};"type"in a&&(b.push_type=a.type);"sub_type"in a&&(b.sub_type=a.sub_type);recordPUSHHealthCheckEvent(b);pushServiceLogger("PUSH Health Check ID: "+
a.id+" did not come back in 5 seconds. Removed ID from babysitter array whose NEW length is "+pushPayloadBabysitterArray.length)}}
function handlePushSocketOnMessageForBabySitter(a,b){if("data"in a&&"undefined"!=typeof PushServiceBabysitterIntervalDetails&&-1<a.data.search(PushServiceBabysitterIntervalDetails.body)){var c={};pushServiceLogger("Received valid Babysitter payload JSON "+a.data);try{c=JSON.parse(a.data)}catch(f){pushServiceLogger("!!! and error occurred while trying to parse the incoming Babysitter json string: "+JSON.stringify(err),"error")}if("new_content"in c){var d=c.new_content;c=(new Date).getTime();tsSend=
d.body.split(" ");var e=tsSend[0];pushServiceLogger("Body JSON w/o timestamp: "+e);d={};try{d=JSON.parse(e)}catch(f){pushServiceLogger("An error occurred while trying to parse the BODY of an incoming Electron CAPI Health Check","error")}"id"in d&&"undefined"!=typeof pushPayloadBabysitterArray&&-1<pushPayloadBabysitterArray.indexOf(d.id)&&(pushServiceLogger("Babysitter ID: "+d.id+" found in PUSH Babysitter Array (current length: "+pushPayloadBabysitterArray.length+")"),pushPayloadBabysitterArray.splice(pushPayloadBabysitterArray.indexOf(d.id),
1),pushServiceLogger("Babysitter ID: "+d.id+" removed from PUSH Babysitter Array (new length: "+pushPayloadBabysitterArray.length+")"),tsSend=parseInt(tsSend[tsSend.length-1]),pushServiceLogger("Push Babysitter payload rcvd.  Time diff between send & receipt: "+(c-tsSend)+"ms"),c={attempt:1,success:1,completion_time:(c-tsSend)/1E3,push_type:pushProvider},"sub_type"in d&&(c.sub_type=d.sub_type),recordPUSHHealthCheckEvent(c))}}}
function pushSocketOpenedActions(a){recordPUSHHealthCheckEvent({push_type:"push-socket-open",sub_type:pushProvider,attempt:1,success:1,completion_time:0});pushServiceLogger("Sending inital push babysitter because we just established a socket for: "+pushProvider);startPushBabysitterInterval();setTimeout(function(){pushServiceLogger("Sending inital push babysitter because we just established a socket for: "+pushProvider);sendCustomTestPushForBabySitterPurposes({type:pushProvider,sub_type:"triggered-by-socket-open"})},
3E3);startPushClientActiveSessionPoller()}function pushSocketClosedActions(){recordPUSHHealthCheckEvent({push_type:"push-socket-close",sub_type:pushProvider,attempt:0,success:0,completion_time:0})}function startPushHealthCheckInterval(){clearPushHealthCheckInterval();setTimeout(function(){PUSHHealthCheckInterval.id=setInterval(dispatchTestPushOnlyIfNeeded,PUSHHealthCheckInterval.interval)},2E4)}
function dispatchTestPushOnlyIfNeeded(){pushServiceLogger("In Body JSON w/o timestamp");var a=getSecondsSinceLastPushRcvd();pushServiceLogger("Last PUSH inbound received "+a+" seconds ago");200<a?(pushServiceLogger("It's been > 200 seconds since last PUSH! do one last health check attempt before opening a new Push socket..."),checkInternetConnectionOutbound(reestablishPushSocket)):180<a?(sendCAPITestMessageFromWebApp(PUSHHealthCheckInterval.body),pushServiceLogger("It's been more than 180 seconds, so issue a Push Health Check")):
pushServiceLogger("It's been less than 180 seconds, so no need to issue a new Push health check")}function generateBabySitterBody(){return"CAPI_HEALTH_CHECK_FOR_"+pushProvider.toUpperCase()+"_2017_FROM_WEBAPP"}
function sendCustomTestPushForBabySitterPurposes(a){a=void 0===a?{}:a;var b=buildRandAlphaNumStr(10);pushPayloadBabysitterArray.push(b);var c={body:PushServiceBabysitterIntervalDetails.body,id:b};"sub_type"in a&&"triggered-by-socket-open"==a.sub_type&&(c.sub_type=a.sub_type);c=JSON.stringify(c);$.ajax({url:baseUrl+"/test?function=capi",data:{body:c+" ---- "+(new Date).getTime(),phone_num:555555555},global:!1,type:"POST",dataType:"text",xhrFields:{withCredentials:!0},success:function(c){-1!=c.search("CAPI test sent successfully")&&
setTimeout(function(){$.extend(a,{id:b,deadline:5E3});babysitThisPushHealthCheck(a)},5E3)}})}function startPushBabysitterInterval(){clearInterval(PushServiceBabysitterIntervalDetails.id);PushServiceBabysitterIntervalDetails.body=generateBabySitterBody();pushServiceLogger("Setting Push Babysitter Interval for: "+pushProvider);PushServiceBabysitterIntervalDetails.id=setInterval(function(){sendCustomTestPushForBabySitterPurposes({type:pushProvider})},PushServiceBabysitterIntervalDetails.interval)}
function clearPushHealthCheckInterval(){try{clearInterval(PUSHHealthCheckInterval.id)}catch(a){console.error("An error occurred trying to close the legacy CAPI Health Check Interval: "+a),_kmq.push(["record","Clear-Legacy-CAPI-Health-Check-Interval-Error",{legacy_capi_health_check_clearinterval_check_error:a}])}}
function recordPUSHHealthCheckEvent(a){var b={push_type:"pusher",session_id:buildRandAlphaNumStr(15)};$.extend(b,a);try{-1<["frd","pusher","mt"].indexOf(b.push_type)&&recordMTLiveLoggerEvent({event:b})}catch(c){console.error("Error occurred recording mt logger event",c)}recordMTStatsEvent({event:{name:"event_push_stats",options:b}})}var userOS="unknown";defineUserOSGlobal();
function defineUserOSGlobal(){if("undefined"!=typeof clientRunningScript&&"CRX"==clientRunningScript)try{chrome.runtime.getPlatformInfo(function(a){"undefined"!=typeof a&&"os"in a&&"string"==typeof a.os&&(userOS=a.os,userOS=userOS.charAt(0).toUpperCase()+userOS.slice(1))})}catch(a){console.error("Unable to determine the user's OS for babysitter event: "+a)}}
function retrieveFRDClientLib(a){$.ajax({type:"GET",url:"https://www.gstatic.com/firebasejs/4.1.3/firebase.js",dataType:"script",success:function(){pushServiceLogger("Success! Retrieved FRD JS Lib");getFRDToken()},error:function(){pushServiceLogger("Unable to retrieve FRD JS Lib","error")}})}
function fetchUserAppInfo(a){a=void 0===a?{}:a;if("attempt"in a){var b=a.attempt;a="https://content.mightytext.net/app-info/data.php"+buildClientSpecificRequestParamsForLogging();$.ajax({type:"GET",url:a,dataType:"json",timeout:3E3,success:function(a){try{console.log("Received a response from /app-info JSON",a),processPusherSwitcherApiResp({resp:a,attempt:b})}catch(d){}},complete:function(a,d){console.log("Inside of complete callback for /app-info request",d);0===b&&setupPushSocket()}});setTimeout(function(){fetchUserAppInfo({attempt:++b})},
9E5)}else console.error("Missing attempt property in data argument for app-info check!")}function parsePushProviderFromApi(a){var b=pushProvider;"object"==typeof a&&("web-app"==clientRunningScript&&"webapp_push_provider"in a?b=a.webapp_push_provider:"CRX"==clientRunningScript&&"crx_push_provider"in a?b=a.crx_push_provider:"push_provider"in a&&(b=a.push_provider));console.info("Found the push_provider field!",b,a);return b}
function processPusherSwitcherApiResp(a){a=void 0===a?{}:a;var b=parsePushProviderFromApi(a.resp),c=b.value;b=b.update_type;a=a.attempt;pushProvider!=c&&(0==a?pushProvider=c:"string"==typeof b&&"forced"==b&&("webapp"==clientRunningScript&&alert(getLanguageSpecificText("forced_app_update_available",globalDefaultLanguage)),"CRX"==clientRunningScript?forceReloadCRX("PushProvider-Change"):"webapp"==clientRunningScript&&reloadAppForUpdate({current_version:pushProvider,new_version:c,update_type:b})))}
function startPushClientActiveSessionPoller(){clearInterval(pusherActiveClientPollerID);var a=baseUrl+"/client-keepalive"+buildClientSpecificRequestParamsForLogging()+"&push_type="+pushProvider;pusherActiveClientPollerID=setInterval(function(){$.ajax({type:"GET",url:a,xhrFields:{withCredentials:!0}})},27E5)}
function generateBabysitterIntervalInMS(){var a=6E5;try{a=getRandomInt(48E4,72E4)}catch(b){console.error("An error occurred while generating rand push babysitter interval",b)}pushServiceLogger("Setting Push Babysitter Interval to: "+a);return a};